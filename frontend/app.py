import streamlit as st
import requests
import base64
import io
import json
import time
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import os
import tempfile
import base64
import google.generativeai as genai
from PIL import Image
from ultralytics import YOLO
from dotenv import load_dotenv
from streamlit_option_menu import option_menu

load_dotenv()
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_KEY:
    try:
        genai.configure(api_key=GEMINI_KEY)
    except Exception:
        # proceed: genai may still error at call time
        pass

st.set_page_config(page_title="Nh·∫≠n d·∫°ng v√† ph√¢n lo·∫°i ƒë·ªô ch√≠n tr√°i m√≠t", layout="wide")
st.markdown(
    """
    <style>
    .main-title {
        font-size: 20px;
        font-weight: 800;
        text-align: center;
        color: #2E7D32;
        margin-bottom: 0.3em;
        letter-spacing: 0.5px;
    }
    .sub-title {
        text-align: center;
        font-size: 18px;
        color: #555;
        font-style: italic;
        margin-bottom: 1.5em;
    }
    hr {
        border: none;
        height: 2px;
        background: linear-gradient(to right, #8BC34A, #558B2F);
        margin-bottom: 1.5em;
    }
    </style>
    
    <div class="main-title">AGRI VISION ‚Äî H·ªÜ TH·ªêNG NH·∫¨N D·∫†NG V√Ä PH√ÇN LO·∫†I ƒê·ªò CH√çN TR√ÅI M√çT</div>
    <p class="sub-title">·ª®ng d·ª•ng AI ph·ª•c v·ª• N√¥ng nghi·ªáp Th√¥ng minh üåæ</p>
    <hr>
    """,
    unsafe_allow_html=True
)

ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
API_URL = "http://127.0.0.1:8000/predict"
LATEST_RESULTS = os.path.join(os.path.dirname(__file__), "latest_results.json")

# --- Chuy·ªÉn ·∫£nh logo sang base64 ƒë·ªÉ hi·ªÉn th·ªã ---
def get_base64_of_bin_file(bin_file):
    with open(bin_file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

logo_path = os.path.join(os.path.dirname(__file__), "logo.png")
if os.path.exists(logo_path):
    logo_base64 = get_base64_of_bin_file(logo_path)
    logo_html = f'<img src="data:image/png;base64,{logo_base64}" width="100" style="border-radius:10px; margin-bottom:10px"/>'
else:
    logo_html = "<div style='font-size:40px'>üçà</div>"


theme = st.get_option("theme.base")  # tr·∫£ v·ªÅ 'dark' ho·∫∑c 'light'

if theme == "dark":
    menu_styles = {
        "container": {
            "background-color": "#1C1E24",
            "padding": "1rem",
            "border-radius": "12px",
        },
        "icon": {"color": "#FFFFFF", "font-size": "20px"},
        "nav-link": {
            "font-size": "16px",
            "color": "#FFFFFFCC",
            "text-align": "left",
            "margin": "6px 0",
            "--hover-color": "#292B33",
            "border-radius": "8px",
        },
        "nav-link-selected": {
            "background-color": "#6DBE45",
            "color": "#FFFFFF",
            "font-weight": "600",
        },
    }
else:
    menu_styles = {
        "container": {
            "background-color": "#FFFFFF",
            "padding": "1rem",
            "border-radius": "12px",
            "box-shadow": "0 2px 8px rgba(0,0,0,0.05)",
        },
        "icon": {"color": "#8EEB60", "font-size": "20px"},
        "nav-link": {
            "font-size": "16px",
            "color": "#000000CC",
            "text-align": "left",
            "margin": "6px 0",
            "--hover-color": "#E8F5E9",
            "border-radius": "8px",
        },
        "nav-link-selected": {
            "background-color": "#6DBE45",
            "color": "#FFFFFF",
            "font-weight": "600",
        },
    }
# Sidebar logo + menu
with st.sidebar:
    st.markdown(
        f"""
        <div style="text-align:center; padding-bottom:10px">
             {logo_html}
            <h3 style="margin:0; color:#6DBE45;">üåø AgriVision</h3>
            <p style="font-size:13px; color:gray;">H·ªá th·ªëng nh·∫≠n d·∫°ng & ph√¢n lo·∫°i ƒë·ªô ch√≠n tr√°i m√≠t</p>
        </div>
        """,
        unsafe_allow_html=True,
    )

    choice = option_menu(
        None,
        ["Trang ch·ªß", "Ph√¢n t√≠ch ·∫£nh", "Video/Webcam",
         "Th·ªëng k√™", "So s√°nh YOLOv8", "Chat AgriVision "],
        icons=["house", "camera", "camera-video", "bar-chart", "activity", "chat-dots"],
        default_index=1,
        styles=menu_styles,
    )

if choice == "Trang ch·ªß":
    st.markdown("""
    ### üéØ M·ª•c ti√™u d·ª± √°n
    ·ª®ng d·ª•ng AI gi√∫p n√¥ng d√¢n nh·∫≠n bi·∫øt **ƒë·ªô ch√≠n c·ªßa tr√°i m√≠t** qua h√¨nh ·∫£nh, 
    h·ªó tr·ª£ **ra quy·∫øt ƒë·ªãnh thu ho·∫°ch ch√≠nh x√°c**, gi·∫£m th·∫•t tho√°t, 
    h∆∞·ªõng ƒë·∫øn **n√¥ng nghi·ªáp th√¥ng minh**.
    """)
    st.info("Ch·ªçn m·ª•c trong menu b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu üëâ")

# ---------------- TAB 1: ·∫¢NH ----------------
elif choice == "Ph√¢n t√≠ch ·∫£nh":
    st.header("Ph√¢n t√≠ch ·∫£nh")

    # === Khu v·ª±c upload v√† ch·ªçn ng∆∞·ª°ng ===
    with st.container():
        st.markdown("### üñºÔ∏è Ch·ªçn ·∫£nh tr√°i m√≠t c·∫ßn ph√¢n t√≠ch")
        uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n...", type=["jpg", "jpeg", "png"])
        confidence = st.slider("Ng∆∞·ª°ng confidence", 0.1, 1.0, 0.5, 0.05)
        st.markdown("<br>", unsafe_allow_html=True)
        analyze_btn = st.button("üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ·∫£nh", use_container_width=True)

    # --- Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh k·∫øt qu·∫£ ngang h√†ng ---
    if uploaded_file:
        col1, col2 = st.columns(2)
        img = Image.open(uploaded_file).convert("RGB")
        with col1:
            st.markdown("**·∫¢nh g·ªëc**")
            st.image(img, use_container_width=True)
        with col2:
            st.markdown("**·∫¢nh k·∫øt qu·∫£ nh·∫≠n d·∫°ng**")
            out_image = st.empty()

    # === Khi nh·∫•n n√∫t "Ph√¢n t√≠ch ·∫£nh" ===
    if analyze_btn and uploaded_file:
        status_placeholder = st.empty()
        status_placeholder.info("‚è≥ ƒêang x·ª≠ l√Ω ·∫£nh, vui l√≤ng ch·ªù trong gi√¢y l√°t...")
        progress = st.progress(0)
        files = {"file": uploaded_file.getvalue()}

        try:
            for percent in range(0, 80, 10):
                time.sleep(0.1)
                progress.progress(percent)

            resp = requests.post(API_URL, files=files, params={"conf": confidence}, timeout=30)
            resp.raise_for_status()
            data = resp.json()

            for percent in range(80, 101, 10):
                time.sleep(0.1)
                progress.progress(percent)

        except Exception as e:
            st.error(f"L·ªói g·ªçi API: {e}")
            data = None

        progress.empty()
        status_placeholder.empty()
        st.success("‚ú® Ph√¢n t√≠ch ho√†n t·∫•t!")

        # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        if data:
            img_data = base64.b64decode(data["image"])
            annotated = Image.open(io.BytesIO(img_data)).convert("RGB")
            st.session_state.last_data = data
            st.session_state.last_img = annotated

            # c·∫≠p nh·∫≠t ·∫£nh k·∫øt qu·∫£ b√™n ph·∫£i
            out_image.image(annotated, use_container_width=True)

            detections = data.get("detections", [])
            if not detections:
                st.warning("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c tr√°i m√≠t n√†o.")
            else:
                df = pd.DataFrame(detections)
                row_df = (
                    df[["label", "confidence"]]
                    .rename(columns={"label": "Lo·∫°i", "confidence": "ƒê·ªô tin c·∫≠y"})
                    .copy()
                )

                row_df["ƒê·ªô tin c·∫≠y"] = row_df["ƒê·ªô tin c·∫≠y"].map(lambda x: f"{x:.2f}")


                st.markdown("---")
                st.markdown("### üìä K·∫øt qu·∫£ nh·∫≠n d·∫°ng")
                st.dataframe(
                    row_df.style.set_properties(**{
                        'text-align': 'center',
                        'font-size': '16px'
                    })
                )

    # === PH·∫¶N 2: Ph√¢n t√≠ch AI chuy√™n s√¢u ===
    if "last_data" in st.session_state:
        st.markdown("---")
        st.markdown("""
        <div style='background-color:#F9FBE7; padding:15px; border-radius:10px;'>
            <h4 style='color:#33691E;'>üß† Ph√¢n t√≠ch chuy√™n s√¢u b·ªüi AgriVision</h4>
            <p style='color:#4E342E;'>AI h·ªó tr·ª£ ƒë√°nh gi√° ƒë·ªô ch√≠n, s√¢u b·ªánh v√† khuy·∫øn ngh·ªã thu ho·∫°ch.</p>
        </div>
        """, unsafe_allow_html=True)

        def summarize_counts_from_latest(latest: dict):
            preds = latest.get("predictions")
            if isinstance(preds, list):
                counts = {}
                for p in preds:
                    cls = p.get("class")
                    if cls:
                        counts[cls] = counts.get(cls, 0) + 1
                total = sum(counts.values())
                return counts, total
            counts = latest.get("counts", {}) or {}
            total = latest.get("total", sum(counts.values()))
            return counts, total

        if os.path.exists(LATEST_RESULTS):
            with open(LATEST_RESULTS, "r", encoding="utf-8") as f:
                last = json.load(f)
            
            st.markdown("<div style='margin-top:15px'></div>", unsafe_allow_html=True)
            with st.expander("üì¶ Xem d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ h·ªá th·ªëng nh·∫≠n d·∫°ng"):
                st.json(last)

            counts, total = summarize_counts_from_latest(last)

            if st.button("üìä Y√™u c·∫ßu AgriVision ph√¢n t√≠ch", use_container_width=True):
                status_placeholder = st.empty()
                status_placeholder.info("ü§ñ AgriVision ƒëang ph√¢n t√≠ch d·ªØ li·ªáu, vui l√≤ng ch·ªù...")
                progress = st.progress(0)

                for p in range(0, 100, 10):
                    time.sleep(0.1)
                    progress.progress(p)

                prompt = f"""
                B·∫°n l√† h·ªá th·ªëng AgriVision ‚Äî n·ªÅn t·∫£ng AI ·ª©ng d·ª•ng YOLOv8 trong nh·∫≠n d·∫°ng v√† ph√¢n lo·∫°i ƒë·ªô ch√≠n tr√°i m√≠t.  
                Sau m·ªói l·∫ßn x·ª≠ l√Ω h√¨nh ·∫£nh, b·∫°n s·∫Ω t·ª± ƒë·ªông t·∫°o K·∫øt qu·∫£ ph√¢n t√≠ch t·ªïng h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch.  
                D·ªØ li·ªáu ƒë·∫ßu v√†o b·∫°n v·ª´a x·ª≠ l√Ω:
                counts={counts}, total={total}.
                H√£y vi·∫øt **K·∫øt qu·∫£ ph√¢n t√≠ch  t·ª± nhi√™n, g·∫ßn g≈©i nh∆∞ng chuy√™n nghi·ªáp**, th·ªÉ hi·ªán ƒë∆∞·ª£c nƒÉng l·ª±c c√¥ng ngh·ªá c·ªßa h·ªá th·ªëng AgriVision.  
                Gi·ªçng vƒÉn gi·ªëng nh∆∞ m·ªôt k·ªπ s∆∞ n√¥ng nghi·ªáp ƒëang chia s·∫ª l·∫°i k·∫øt qu·∫£ m√† AgriVision v·ª´a quan s√°t ƒë∆∞·ª£c.
                B·ªë c·ª•c y√™u c·∫ßu:
                1) T·ªïng quan t√¨nh h√¨nh nh·∫≠n d·∫°ng (k·∫øt qu·∫£ ph√°t hi·ªán, t·ªâ l·ªá m√≠t ch√≠n, non, s√¢u b·ªánh).  
                2Ô∏è) Nh·∫≠n x√©t & khuy·∫øn ngh·ªã thu ho·∫°ch (n√™u r√µ n√™n thu hay ch∆∞a, l√Ω do, l·ª£i √≠ch).  
                3Ô∏è) Bi·ªán ph√°p x·ª≠ l√Ω n·∫øu c√≥ m√≠t s√¢u b·ªánh (ƒë∆∞a h∆∞·ªõng d·∫´n th·ª±c t·∫ø, d·ªÖ hi·ªÉu).  
                4Ô∏è) H·ªó tr·ª£ k·ªπ thu·∫≠t & t√≠nh nƒÉng th√¥ng minh c·ªßa h·ªá th·ªëng (m√¥ t·∫£ c√°ch AgriVision gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω v√† chƒÉm s√≥c v∆∞·ªùn hi·ªáu qu·∫£ h∆°n).   

                Phong c√°ch vi·∫øt:
                - M·ªü ƒë·∫ßu b·∫±ng l·ªùi ch√†o: ‚ÄúCh√†o b·∫°n, t√¥i l√† AgriVision ‚Äì ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh trong v∆∞·ªùn m√≠t.‚Äù  
                - Ng√¥n t·ª´ th√¢n thi·ªán, r√µ r√†ng, kh√¥ng r∆∞·ªùm r√†.  
                """

                ai_text = None
                try:
                    if GEMINI_KEY:
                        model = genai.GenerativeModel("models/gemini-2.5-flash")
                        resp = model.generate_content(prompt)
                        ai_text = getattr(resp, "text", None) or str(resp)
                    else:
                        raise RuntimeError("No GEMINI key")
                except Exception as e:
                    ai_text = None
                    st.error(f"Kh√¥ng g·ªçi ƒë∆∞·ª£c Gemini (fallback). L·ªói: {e}")

                progress.empty()
                status_placeholder.empty()
                st.success("‚ú® Ph√¢n t√≠ch ho√†n t·∫•t!")

                if not ai_text:
                    lines = ["B√°o c√°o ph√¢n t√≠ch (fallback):"]
                    if total == 0:
                        lines.append("- Kh√¥ng ph√°t hi·ªán tr√°i m√≠t n√†o trong ·∫£nh.")
                    else:
                        for k, v in counts.items():
                            pct = (v / total) * 100 if total > 0 else 0
                            lines.append(f"- {k}: {v} tr√°i ({pct:.1f}%)")
                    ai_text = "\n".join(lines)

                st.markdown("### üìë K·∫øt qu·∫£ ph√¢n t√≠ch AI")
                st.markdown(
                    f"<div style='background-color:#FAFAFA; padding:15px; border-radius:10px; color:#212121;'>{ai_text}</div>",
                    unsafe_allow_html=True
                )

# ---------------- TAB 2: VIDEO / WEBCAM ----------------
elif choice == "Video/Webcam":
    st.header("Video/Webcam (ch·∫°y model local)")
    st.markdown(
        "**L∆∞u √Ω:** tab n√†y d√πng model local (yolov8) ƒë·ªÉ demo video/webcam. "
        "ƒê·∫£m b·∫£o `yolov8/best.pt` c√≥ s·∫µn n·∫øu mu·ªën ch·∫°y local inference."
    )

    # Checkbox ch·ªçn ch·∫°y local inference
    use_local = st.checkbox("Ch·∫°y inference local (kh√¥ng qua API)", value=True, key="local_inference_toggle")

    if use_local:
        from ultralytics import YOLO

        @st.cache_resource
        def load_local_model():
            try:
                model_path = os.path.join(os.path.dirname(__file__), "..", "yolov8", "best.pt")
                return YOLO(model_path)
            except Exception as e:
                st.error(f"Kh√¥ng load ƒë∆∞·ª£c model local: {e}")
                return None

        local_model = load_local_model()
        if local_model is None:
            st.error("Kh√¥ng load ƒë∆∞·ª£c model local. Ki·ªÉm tra yolov8/best.pt")
            use_local = False
    else:
        st.info("S·ª≠ d·ª•ng FastAPI backend ƒë·ªÉ inference video (kh√¥ng kh·∫£ d·ª•ng cho webcam realtime).")

    source = st.radio("Ngu·ªìn:", ["Video file", "Webcam"], horizontal=True, key="video_source")
    conf_v = st.slider("Confidence", 0.1, 1.0, 0.5, 0.05, key="confidence_slider")

    frame_slot = st.empty()  # slot hi·ªÉn th·ªã frame

    # ---------------- Video File ----------------
    if source == "Video file":
        up = st.file_uploader("Upload video", type=["mp4", "mov", "avi"], key="video_upload")
        if up:
            t = tempfile.NamedTemporaryFile(delete=False)
            t.write(up.read())
            cap = cv2.VideoCapture(t.name)

            stop_video = st.checkbox("D·ª´ng video", value=False, key="stop_video_toggle")
            while cap.isOpened() and not stop_video:
                ret, frame = cap.read()
                if not ret:
                    break
                if use_local and local_model:
                    res = local_model.track(frame, conf=conf_v, persist=True, tracker="bytetrack.yaml")
                    frame = res[0].plot()
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_slot.image(frame_rgb, use_container_width=True)

                stop_video = st.session_state.get("stop_video_toggle", False)

            cap.release()

    # ---------------- Webcam ----------------
    else:
        if use_local:
            # Checkbox b·∫≠t/t·∫Øt webcam (kh√¥ng t·∫°o nhi·ªÅu l·∫ßn)
            if "webcam_running" not in st.session_state:
                st.session_state.webcam_running = False
            st.session_state.webcam_running = st.checkbox(
                "B·∫≠t webcam", value=False, key="webcam_toggle"
            )

            if st.session_state.webcam_running:
                cap = cv2.VideoCapture(0)
                while st.session_state.webcam_running:
                    ret, frame = cap.read()
                    if not ret:
                        st.warning("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c webcam.")
                        break
                    res = local_model.track(frame, conf=conf_v, persist=True, tracker="bytetrack.yaml")
                    frame = res[0].plot()
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame_slot.image(frame_rgb, use_container_width=True)

                    # Ki·ªÉm tra tr·∫°ng th√°i checkbox
                    if not st.session_state.webcam_running:
                        break

                cap.release()
        else:
            st.error("Webcam realtime y√™u c·∫ßu inference local (Model local). B·∫≠t 'Ch·∫°y inference local' tr∆∞·ªõc.")

# ---------------- TAB 3: M√î H√åNH & TH·ªêNG K√ä ----------------
elif choice == "Th·ªëng k√™":
    st.header("M√¥ h√¨nh & Th·ªëng k√™")
    st.markdown("""
    **M√¥ h√¨nh hi·ªÉn th·ªã:** M√¥ h√¨nh YOLOv8 nh·∫≠n d·∫°ng m√≠t ch√≠n  
    **T·∫≠p d·ªØ li·ªáu:** ~1700 ·∫£nh, 3 nh√£n: mit_non, mit_chin, mit_saubenh  
    **Tri·ªÉn khai:** FastAPI (inference) + Streamlit (frontend)  
    """)
    st.markdown("B·∫°n c√≥ th·ªÉ m·ªü tab So s√°nh ƒë·ªÉ xem k·∫øt qu·∫£ training (results_n.csv / results_s.csv).")

# ---------------- TAB 4: So s√°nh ----------------
elif choice == "So s√°nh YOLOv8":
    st.header("So s√°nh YOLOv8n vs YOLOv8s")
    path_n = os.path.join(os.path.dirname(__file__), "..", "yolov8", "results_n.csv")
    path_s = os.path.join(os.path.dirname(__file__), "..", "yolov8", "results_s.csv")
    if os.path.exists(path_n) and os.path.exists(path_s):
        df_n = pd.read_csv(path_n)
        df_s = pd.read_csv(path_s)
        metrics = ["metrics/precision(B)", "metrics/recall(B)", "metrics/mAP50(B)"]
        for m in metrics:
            if m in df_n.columns and m in df_s.columns:
                fig, ax = plt.subplots()
                ax.plot(df_n.index, df_n[m], label="n")
                ax.plot(df_s.index, df_s[m], label="s")
                ax.set_title(m)
                ax.legend()
                st.pyplot(fig)
        st.dataframe({
            "YOLOv8n (last)": df_n.iloc[-1].to_dict(),
            "YOLOv8s (last)": df_s.iloc[-1].to_dict()
        })
    else:
        st.warning("Thi·∫øu results_n.csv / results_s.csv trong yolov8/ ‚Äî export t·ª´ qu√° tr√¨nh training.")

# ---------------- TAB 5: CHAT (Gemini) ----------------
elif choice == "Chat AgriVision ":
    st.header("Tr·ª£ l√Ω n√¥ng nghi·ªáp th√¥ng minh - AgriVision üåæ")
    st.subheader("Trao ƒë·ªïi v·ªÅ m√¥ h√¨nh YOLOv8, ƒë·ªô ch√≠n tr√°i m√≠t, ho·∫∑c k·ªπ thu·∫≠t n√¥ng nghi·ªáp.")
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    for msg in st.session_state.chat_history:
        role = msg["role"]
        content = msg["content"]
        if role=="user":
            st.write(f"**B·∫°n:** {content}")
        else:
            st.write(f"**AI:** {content}")

    user_q = st.text_input("Nh·∫≠p c√¢u h·ªèi", "")
    if st.button("G·ª≠i c√¢u h·ªèi"):
        if user_q.strip():
            st.session_state.chat_history.append({"role":"user","content":user_q})
            try:
                if GEMINI_KEY:
                    model = genai.GenerativeModel("models/gemini-2.5-flash")
                    resp = model.generate_content(user_q)
                    answer = getattr(resp, "text", None) or str(resp)
                else:
                    raise RuntimeError("No GEMINI key")
            except Exception as e:
                answer = f"[Fallback tr·∫£ l·ªùi t·ª± ƒë·ªông] Kh√¥ng th·ªÉ g·ªçi Gemini: {e}"
            st.session_state.chat_history.append({"role":"assistant","content":answer})
