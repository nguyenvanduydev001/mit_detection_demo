import streamlit as st
import requests
import base64
import io
import json
import time
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import os
import tempfile
import base64
import pandas as pd
import matplotlib.pyplot as plt
import google.generativeai as genai
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from PIL import Image
from ultralytics import YOLO
from dotenv import load_dotenv
from streamlit_option_menu import option_menu
from reportlab.lib import colors as rl_colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from matplotlib.dates import DateFormatter
                    
load_dotenv()
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_KEY:
    try:
        genai.configure(api_key=GEMINI_KEY)
    except Exception:
        # proceed: genai may still error at call time
        pass

st.set_page_config(page_title="Agri Vision - H·ªá Th·ªëng Nh·∫≠n D·∫°ng Vfa Ph√¢n Lo·∫°i ƒê·ªô Ch√≠n Tr√°i M√≠t", layout="wide")
st.markdown(
    """
    <style>
    .main-title {
        font-size: 20px;
        font-weight: 800;
        text-align: center;
        color: #2E7D32;
        margin-bottom: 0.3em;
        letter-spacing: 0.5px;
    }
    .sub-title {
        text-align: center;
        font-size: 18px;
        color: #555;
        font-style: italic;
        margin-bottom: 1.5em;
    }
    hr {
        border: none;
        height: 2px;
        background: linear-gradient(to right, #8BC34A, #558B2F);
        margin-bottom: 1.5em;
    }
    </style>
    
    <div class="main-title">AGRI VISION ‚Äî H·ªÜ TH·ªêNG NH·∫¨N D·∫†NG V√Ä PH√ÇN LO·∫†I ƒê·ªò CH√çN TR√ÅI M√çT</div>
    <p class="sub-title">·ª®ng d·ª•ng AI ph·ª•c v·ª• N√¥ng nghi·ªáp Th√¥ng minh</p>
    <hr>
    """,
    unsafe_allow_html=True
)

ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
API_URL = "http://127.0.0.1:8000/predict"
LATEST_RESULTS = os.path.join(os.path.dirname(__file__), "latest_results.json")

# --- Chuy·ªÉn ·∫£nh logo sang base64 ƒë·ªÉ hi·ªÉn th·ªã ---
def get_base64_of_bin_file(bin_file):
    with open(bin_file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

logo_path = os.path.join(os.path.dirname(__file__), "logo.png")
if os.path.exists(logo_path):
    logo_base64 = get_base64_of_bin_file(logo_path)
    logo_html = f'<img src="data:image/png;base64,{logo_base64}" width="140" style="border-radius:10px; margin-bottom:10px"/>'
else:
    logo_html = "<div style='font-size:40px'>üçà</div>"


theme = st.get_option("theme.base")  # tr·∫£ v·ªÅ 'dark' ho·∫∑c 'light'

if theme == "dark":
    menu_styles = {
        "container": {
            "background-color": "#1C1E24",
            "padding": "1rem",
            "border-radius": "12px",
        },
        "icon": {"color": "#FFFFFF", "font-size": "20px"},
        "nav-link": {
            "font-size": "16px",
            "color": "#FFFFFFCC",
            "text-align": "left",
            "margin": "6px 0",
            "--hover-color": "#292B33",
            "border-radius": "8px",
        },
        "nav-link-selected": {
            "background-color": "#6DBE45",
            "color": "#FFFFFF",
            "font-weight": "600",
        },
    }
else:
    menu_styles = {
        "container": {
            "background-color": "#FFFFFF",
            "padding": "1rem",
            "border-radius": "12px",
            "box-shadow": "0 2px 8px rgba(0,0,0,0.05)",
        },
        "icon": {"color": "#8EEB60", "font-size": "20px"},
        "nav-link": {
            "font-size": "16px",
            "color": "#000000CC",
            "text-align": "left",
            "margin": "6px 0",
            "--hover-color": "#E8F5E9",
            "border-radius": "8px",
        },
        "nav-link-selected": {
            "background-color": "#6DBE45",
            "color": "#FFFFFF",
            "font-weight": "600",
        },
    }
# Sidebar logo + menu
with st.sidebar:
    st.markdown(
        f"""
        <div style="text-align:center; padding-bottom:10px">
             {logo_html}
        </div>
        """,
        unsafe_allow_html=True,
    )

    choice = option_menu(
        None,
        ["Trang ch·ªß", "Ph√¢n t√≠ch ·∫£nh", "Video/Webcam",
         "Th·ªëng k√™", "So s√°nh YOLOv8", "Chat AgriVision "],
        icons=["house", "camera", "camera-video", "bar-chart", "activity", "chat-dots"],
        default_index=1,
        styles=menu_styles,
    )
    #Reset session_state khi chuy·ªÉn tab ƒë·ªÉ tr√°nh l·ªói hi·ªÉn th·ªã ch·ªìng
    if "last_tab" not in st.session_state:
        st.session_state["last_tab"] = choice
    elif st.session_state["last_tab"] != choice:
    # Reset tr·∫°ng th√°i ch·ªâ khi ƒë·ªïi tab
        st.session_state["last_tab"] = choice
        st.session_state.pop("video_done", None)
        st.session_state.pop("video_json", None)
        st.session_state.pop("last_data", None)

if choice == "Trang ch·ªß":
    st.markdown("""
    ### üéØ M·ª•c ti√™u d·ª± √°n
    ·ª®ng d·ª•ng AI gi√∫p n√¥ng d√¢n nh·∫≠n bi·∫øt **ƒë·ªô ch√≠n c·ªßa tr√°i m√≠t** qua h√¨nh ·∫£nh, 
    h·ªó tr·ª£ **ra quy·∫øt ƒë·ªãnh thu ho·∫°ch ch√≠nh x√°c**, gi·∫£m th·∫•t tho√°t, 
    h∆∞·ªõng ƒë·∫øn **n√¥ng nghi·ªáp th√¥ng minh**.
    """)
    st.info("Ch·ªçn m·ª•c trong menu b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu üëâ")

# ---------------- TAB 1: ·∫¢NH ----------------
elif choice == "Ph√¢n t√≠ch ·∫£nh":
    st.header("Ph√¢n t√≠ch ·∫£nh")

    # === Khu v·ª±c upload v√† ch·ªçn ng∆∞·ª°ng ===
    with st.container():
        st.markdown("### üñºÔ∏è Ch·ªçn ·∫£nh tr√°i m√≠t c·∫ßn ph√¢n t√≠ch")
        uploaded_file = st.file_uploader("üìÅ T·∫£i ·∫£nh l√™n (JPG, JPEG, PNG)", type=["jpg", "jpeg", "png"])
        confidence = st.slider("Ng∆∞·ª°ng Confidence",0.1, 1.0, 0.5, 0.05,help="Gi√° tr·ªã n√†y x√°c ƒë·ªãnh m·ª©c ƒë·ªô ch·∫Øc ch·∫Øn c·ªßa m√¥ h√¨nh khi nh·∫≠n d·∫°ng. "
         "C√†ng cao th√¨ m√¥ h√¨nh ch·ªâ hi·ªÉn th·ªã c√°c ƒë·ªëi t∆∞·ª£ng m√† n√≥ tin t∆∞·ªüng m·∫°nh, "
         "c√†ng th·∫•p th√¨ m√¥ h√¨nh hi·ªÉn th·ªã nhi·ªÅu h∆°n nh∆∞ng d·ªÖ nhi·ªÖu.")
        st.markdown("<br>", unsafe_allow_html=True)
        analyze_btn = st.button("üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ·∫£nh", use_container_width=True)

    # --- Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh k·∫øt qu·∫£ ngang h√†ng ---
    if uploaded_file:
        col1, col2 = st.columns(2)
        img = Image.open(uploaded_file).convert("RGB")
        with col1:
            st.markdown("**·∫¢nh g·ªëc**")
            st.image(img, use_container_width=True)
        with col2:
            st.markdown("**·∫¢nh k·∫øt qu·∫£ nh·∫≠n d·∫°ng**")
            out_image = st.empty()

    # === Khi nh·∫•n n√∫t "Ph√¢n t√≠ch ·∫£nh" ===
    if analyze_btn and uploaded_file:
        status_placeholder = st.empty()
        status_placeholder.info("‚è≥ ƒêang x·ª≠ l√Ω ·∫£nh, vui l√≤ng ch·ªù trong gi√¢y l√°t...")
        progress = st.progress(0)
        files = {"file": uploaded_file.getvalue()}

        try:
            for percent in range(0, 80, 10):
                time.sleep(0.1)
                progress.progress(percent)

            resp = requests.post(API_URL, files=files, params={"conf": confidence}, timeout=30)
            resp.raise_for_status()
            data = resp.json()

            for percent in range(80, 101, 10):
                time.sleep(0.1)
                progress.progress(percent)

        except Exception as e:
            st.error(f"L·ªói g·ªçi API: {e}")
            data = None

        progress.empty()
        status_placeholder.empty()
        st.success("‚ú® Ph√¢n t√≠ch ho√†n t·∫•t!")

        # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        if data:
            img_data = base64.b64decode(data["image"])
            annotated = Image.open(io.BytesIO(img_data)).convert("RGB")
            st.session_state.last_data = data
            st.session_state.last_img = annotated
            from datetime import datetime
            log_path = os.path.join(os.path.dirname(__file__), "analysis_log.json")

            # ƒê·∫øm s·ªë l∆∞·ª£ng t·ª´ng lo·∫°i m√≠t trong l·∫ßn x·ª≠ l√Ω n√†y
            preds = data.get("detections", []) or data.get("predictions", [])
            counts = {}
            for p in preds:
                cls = p.get("class") or p.get("label")
                if cls:
                    counts[cls] = counts.get(cls, 0) + 1

            # ƒê·ªçc log c≈© n·∫øu c√≥
            logs = []
            if os.path.exists(log_path):
                try:
                    with open(log_path, "r", encoding="utf-8") as f:
                        logs = json.load(f)
                except Exception:
                    logs = []

            # Th√™m d·ªØ li·ªáu m·ªõi
            for cls_name, cnt in counts.items():
                logs.append({
                    "timestamp": datetime.now().isoformat(),
                    "class": cls_name,
                    "count": cnt
                })

            # L∆∞u l·∫°i file
            with open(log_path, "w", encoding="utf-8") as f:
                json.dump(logs, f, ensure_ascii=False, indent=2)


            # c·∫≠p nh·∫≠t ·∫£nh k·∫øt qu·∫£ b√™n ph·∫£i
            out_image.image(annotated, use_container_width=True)

            detections = data.get("detections", [])
            if not detections:
                st.warning("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c tr√°i m√≠t n√†o.")
            else:
                df = pd.DataFrame(detections)
                row_df = (
                    df[["label", "confidence"]]
                    .rename(columns={"label": "Lo·∫°i", "confidence": "ƒê·ªô tin c·∫≠y"})
                    .copy()
                )

                row_df["ƒê·ªô tin c·∫≠y"] = row_df["ƒê·ªô tin c·∫≠y"].map(lambda x: f"{x:.2f}")


                st.markdown("---")
                st.markdown("### üìä K·∫øt qu·∫£ nh·∫≠n d·∫°ng")
                st.dataframe(
                    row_df.style.set_properties(**{
                        'text-align': 'center',
                        'font-size': '16px'
                    })
                )

    # === PH·∫¶N 2: Ph√¢n t√≠ch AI chuy√™n s√¢u ===
    if "last_data" in st.session_state:
        st.markdown("---")
        st.markdown("""
        <div style='background-color:#F9FBE7; padding:15px; border-radius:10px;'>
            <h4 style='color:#33691E;'>üß† Ph√¢n t√≠ch ·∫£nh chuy√™n s√¢u b·ªüi AgriVision</h4>
            <p style='color:#4E342E;'>AI h·ªó tr·ª£ ƒë√°nh gi√° ƒë·ªô ch√≠n, s√¢u b·ªánh v√† khuy·∫øn ngh·ªã thu ho·∫°ch.</p>
        </div>
        """, unsafe_allow_html=True)

        def summarize_counts_from_latest(latest: dict):
            preds = latest.get("predictions")
            if isinstance(preds, list):
                counts = {}
                for p in preds:
                    cls = p.get("class")
                    if cls:
                        counts[cls] = counts.get(cls, 0) + 1
                total = sum(counts.values())
                return counts, total
            counts = latest.get("counts", {}) or {}
            total = latest.get("total", sum(counts.values()))
            return counts, total

        if os.path.exists(LATEST_RESULTS):
            with open(LATEST_RESULTS, "r", encoding="utf-8") as f:
                last = json.load(f)
            
            st.markdown("<div style='margin-top:15px'></div>", unsafe_allow_html=True)
            with st.expander("üì¶ Xem d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ h·ªá th·ªëng nh·∫≠n d·∫°ng"):
                st.json(last)

            counts, total = summarize_counts_from_latest(last)

            if st.button("üìä Y√™u c·∫ßu AgriVision ph√¢n t√≠ch ·∫£nh", use_container_width=True):
                status_placeholder = st.empty()
                status_placeholder.info("ü§ñ AgriVision ƒëang ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ h√¨nh ·∫£nh, vui l√≤ng ch·ªù...")
                progress = st.progress(0)

                for p in range(0, 100, 10):
                    time.sleep(0.1)
                    progress.progress(p)

                prompt = f"""
                B·∫°n l√† h·ªá th·ªëng AgriVision ‚Äî n·ªÅn t·∫£ng AI ·ª©ng d·ª•ng YOLOv8 trong nh·∫≠n d·∫°ng v√† ph√¢n lo·∫°i ƒë·ªô ch√≠n tr√°i m√≠t.Sau m·ªói l·∫ßn x·ª≠ l√Ω h√¨nh ·∫£nh, b·∫°n s·∫Ω t·ª± ƒë·ªông t·∫°o K·∫øt qu·∫£ ph√¢n t√≠ch t·ªïng h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch.  
                D·ªØ li·ªáu ƒë·∫ßu v√†o b·∫°n v·ª´a x·ª≠ l√Ω:
                counts={counts}, total={total}.
                H√£y vi·∫øt **K·∫øt qu·∫£ ph√¢n t√≠ch  t·ª± nhi√™n, g·∫ßn g≈©i nh∆∞ng chuy√™n nghi·ªáp**, th·ªÉ hi·ªán ƒë∆∞·ª£c nƒÉng l·ª±c c√¥ng ngh·ªá c·ªßa h·ªá th·ªëng AgriVision.  
                Gi·ªçng vƒÉn gi·ªëng nh∆∞ m·ªôt k·ªπ s∆∞ n√¥ng nghi·ªáp ƒëang chia s·∫ª l·∫°i k·∫øt qu·∫£ m√† AgriVision v·ª´a quan s√°t ƒë∆∞·ª£c.
                B·ªë c·ª•c y√™u c·∫ßu:
                1) T·ªïng quan t√¨nh h√¨nh nh·∫≠n d·∫°ng (k·∫øt qu·∫£ ph√°t hi·ªán, t·ªâ l·ªá m√≠t ch√≠n, non, s√¢u b·ªánh).  
                2Ô∏è) Nh·∫≠n x√©t & khuy·∫øn ngh·ªã thu ho·∫°ch (n√™u r√µ n√™n thu hay ch∆∞a, l√Ω do, l·ª£i √≠ch).  
                3Ô∏è) Bi·ªán ph√°p x·ª≠ l√Ω n·∫øu c√≥ m√≠t s√¢u b·ªánh (ƒë∆∞a h∆∞·ªõng d·∫´n th·ª±c t·∫ø, d·ªÖ hi·ªÉu).  
                4Ô∏è) H·ªó tr·ª£ k·ªπ thu·∫≠t & t√≠nh nƒÉng th√¥ng minh c·ªßa h·ªá th·ªëng (m√¥ t·∫£ c√°ch AgriVision gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω v√† chƒÉm s√≥c v∆∞·ªùn hi·ªáu qu·∫£ h∆°n).   
                5) Gi·ªõi thi·ªáu ng·∫Øn v·ªÅ vai tr√≤ c·ªßa AgriVision trong vi·ªác h·ªó tr·ª£ b·∫°n theo d√µi v∆∞·ªùn qua h√¨nh ·∫£nh.
                
                Phong c√°ch vi·∫øt:
                - M·ªü ƒë·∫ßu b·∫±ng l·ªùi ch√†o: ‚ÄúCh√†o b·∫°n, t√¥i l√† AgriVision ‚Äì ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh trong v∆∞·ªùn m√≠t.‚Äù  
                - Ng√¥n t·ª´ th√¢n thi·ªán, r√µ r√†ng, kh√¥ng r∆∞·ªùm r√†.  
                """

                ai_text = None
                try:
                    if GEMINI_KEY:
                        model = genai.GenerativeModel("models/gemini-2.5-flash")
                        resp = model.generate_content(prompt)
                        ai_text = getattr(resp, "text", None) or str(resp)
                    else:
                        raise RuntimeError("No GEMINI key")
                except Exception as e:
                    ai_text = None
                    st.error(f"Kh√¥ng g·ªçi ƒë∆∞·ª£c Gemini (fallback). L·ªói: {e}")

                progress.empty()
                status_placeholder.empty()
                st.success("‚ú® Ph√¢n t√≠ch ho√†n t·∫•t!")

                if not ai_text:
                    lines = ["B√°o c√°o ph√¢n t√≠ch (fallback):"]
                    if total == 0:
                        lines.append("- Kh√¥ng ph√°t hi·ªán tr√°i m√≠t n√†o trong ·∫£nh.")
                    else:
                        for k, v in counts.items():
                            pct = (v / total) * 100 if total > 0 else 0
                            lines.append(f"- {k}: {v} tr√°i ({pct:.1f}%)")
                    ai_text = "\n".join(lines)

                st.markdown("### üìë K·∫øt qu·∫£ ph√¢n t√≠ch AI")
                st.markdown(
                    f"<div style='background-color:#FAFAFA; padding:15px; border-radius:10px; color:#212121;'>{ai_text}</div>",
                    unsafe_allow_html=True
                )

# ---------------- TAB 2: VIDEO / WEBCAM ----------------
elif choice == "Video/Webcam":
    import time, json, tempfile, os, cv2
    from ultralytics import YOLO

    st.markdown("## üé• Ph√¢n t√≠ch Video / Webcam")
    st.info(
        "ü§ñ **AgriVision** nh·∫≠n d·∫°ng ƒë·ªô ch√≠n tr√°i m√≠t tr·ª±c ti·∫øp t·ª´ video ho·∫∑c webcam. "
        "Video ƒë∆∞·ª£c x·ª≠ l√Ω b·∫±ng m√¥ h√¨nh YOLOv8, hi·ªÉn th·ªã bounding box, label v√† JSON realtime b√™n c·∫°nh."
    )

    # --- T·∫£i model ---
    @st.cache_resource(show_spinner="üöÄ ƒêang t·∫£i m√¥ h√¨nh YOLOv8...")
    def load_model():
        model_path = os.path.join(os.path.dirname(__file__), "..", "yolov8", "best.pt")
        return YOLO(model_path)

    model = load_model()

    # --- C·∫•u h√¨nh ---
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        source = st.radio("Ngu·ªìn d·ªØ li·ªáu:", ["üéûÔ∏è Video file", "üì∑ Webcam"], horizontal=True)
    with col2:
        conf_v = st.slider("Ng∆∞·ª°ng Confidence",0.1, 1.0, 0.5, 0.05,
        help="Gi√° tr·ªã n√†y x√°c ƒë·ªãnh m·ª©c ƒë·ªô ch·∫Øc ch·∫Øn c·ªßa m√¥ h√¨nh khi nh·∫≠n d·∫°ng. "
         "C√†ng cao th√¨ m√¥ h√¨nh ch·ªâ hi·ªÉn th·ªã c√°c ƒë·ªëi t∆∞·ª£ng m√† n√≥ tin t∆∞·ªüng m·∫°nh, "
         "c√†ng th·∫•p th√¨ m√¥ h√¨nh hi·ªÉn th·ªã nhi·ªÅu h∆°n nh∆∞ng d·ªÖ nhi·ªÖu."
)

    st.markdown("---")
    if source == "üì∑ Webcam":
        st.session_state["video_done"] = False
        st.session_state.pop("video_json", None)


    # ------------------- VIDEO FILE -------------------
    if source == "üéûÔ∏è Video file":
        uploaded = st.file_uploader("üìÅ T·∫£i video l√™n (MP4, MOV, AVI)", type=["mp4", "mov", "avi"])

        if uploaded:
            temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
            temp_input.write(uploaded.read())
            video_path = temp_input.name

            st.video(video_path)
            st.success("‚úÖ Video ƒë√£ t·∫£i xong! B·∫•m n√∫t d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

            if st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu ph√¢n t√≠ch video"):
                cap = cv2.VideoCapture(video_path)
                fps = int(cap.get(cv2.CAP_PROP_FPS)) or 24

                video_col, json_col = st.columns([3, 2])
                frame_slot = video_col.empty()
                json_box = json_col.empty()
                detections_all = []

                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break

                    results = model.track(frame, conf=conf_v, persist=True, tracker="bytetrack.yaml")
                    predictions_json = {"predictions": []}

                    if results and len(results) > 0:
                        boxes = results[0].boxes
                        labels = results[0].names
                        for box in boxes:
                            cls_id = int(box.cls[0])
                            label = labels.get(cls_id, "m√≠t")
                            conf = float(box.conf[0])
                            xyxy = box.xyxy[0].cpu().numpy().astype(float)
                            x, y, w, h = xyxy[0], xyxy[1], xyxy[2] - xyxy[0], xyxy[3] - xyxy[1]

                            predictions_json["predictions"].append({
                                "class": label,
                                "confidence": round(conf, 3),
                                "bbox": {
                                    "x": round(x, 3),
                                    "y": round(y, 3),
                                    "width": round(w, 3),
                                    "height": round(h, 3)
                                }
                            })

                            # V·∫Ω khung v√† nh√£n
                            cv2.rectangle(frame, (int(xyxy[0]), int(xyxy[1])),
                                          (int(xyxy[2]), int(xyxy[3])), (0, 255, 0), 2)
                            label_text = f"{label} {conf:.0%}"
                            (tw, th), _ = cv2.getTextSize(label_text, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)
                            cv2.rectangle(frame, (int(xyxy[0]), int(xyxy[1] - th - 6)),
                                          (int(xyxy[0] + tw + 4), int(xyxy[1])), (0, 255, 0), -1)
                            cv2.putText(frame, label_text, (int(xyxy[0] + 2), int(xyxy[1] - 4)),
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

                    # Hi·ªÉn th·ªã realtime
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame_slot.image(frame_rgb, use_container_width=True)

                    # JSON realtime b√™n ph·∫£i
                    json_html = f"""
                    <div style='background-color:#f9fafb;padding:10px;border-radius:10px;
                    border:1px solid #e3e3e3;height:308px;overflow-y:auto;
                    font-family:monospace;font-size:13px;white-space:pre;'>
                        {json.dumps(predictions_json, indent=2, ensure_ascii=False)}
                    </div>
                    """
                    json_box.markdown(json_html, unsafe_allow_html=True)
                    detections_all.append(predictions_json)

                cap.release()

                # L∆∞u k·∫øt qu·∫£ cu·ªëi c√πng
                st.session_state["video_done"] = True
                st.session_state["video_json"] = detections_all[-1] if detections_all else {}
    # ---------------- SAU KHI X·ª¨ L√ù XONG VIDEO ----------------
    if st.session_state.get("video_done", False):
        latest = st.session_state.get("video_json", {})

        st.markdown("---")
        st.markdown("""
        <div style='background-color:#FCFCE3; padding:15px; border-radius:10px; margin-bottom:10px;'>
            <h4 style='color:#33691E;'>üí¨ Ph√¢n t√≠ch video chuy√™n s√¢u b·ªüi AgriVision</h4>
            <p style='color:#4E342E;'>AgriVision t·ªïng h·ª£p v√† ƒë√°nh gi√° k·∫øt qu·∫£ nh·∫≠n d·∫°ng t·ª´ video b·∫°n g·ª≠i.</p>
        </div>
        """, unsafe_allow_html=True)

        def summarize_video_data(data):
            preds = data.get("predictions", [])
            counts = {}
            for p in preds:
                cls = p.get("class")
                if cls:
                    counts[cls] = counts.get(cls, 0) + 1
            total = sum(counts.values())
            return counts, total

        counts, total = summarize_video_data(latest)

        if st.button("üìä Y√™u c·∫ßu AgriVision ph√¢n t√≠ch video", use_container_width=True):
            status = st.empty()
            progress = st.progress(0)
            status.info("ü§ñ AgriVision ƒëang ph√¢n t√≠ch d·ªØ li·ªáu video...")
            for p in range(0, 100, 10):
                time.sleep(0.1)
                progress.progress(p)
            progress.empty()
            status.empty()

            prompt = f"""
            B·∫°n l√† h·ªá th·ªëng AgriVision ‚Äî n·ªÅn t·∫£ng AI ·ª©ng d·ª•ng YOLOv8 trong nh·∫≠n d·∫°ng v√† ph√¢n lo·∫°i ƒë·ªô ch√≠n tr√°i m√≠t.Sau m·ªói l·∫ßn x·ª≠ l√Ω video, b·∫°n s·∫Ω t·ª± ƒë·ªông t·∫°o K·∫øt qu·∫£ ph√¢n t√≠ch t·ªïng h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch.  
            D·ªØ li·ªáu ƒë·∫ßu v√†o b·∫°n v·ª´a x·ª≠ l√Ω:
            counts={counts}, total={total}.
            H√£y vi·∫øt **K·∫øt qu·∫£ ph√¢n t√≠ch  t·ª± nhi√™n, g·∫ßn g≈©i nh∆∞ng chuy√™n nghi·ªáp**, th·ªÉ hi·ªán ƒë∆∞·ª£c nƒÉng l·ª±c c√¥ng ngh·ªá c·ªßa h·ªá th·ªëng AgriVision.  
            Gi·ªçng vƒÉn gi·ªëng nh∆∞ m·ªôt k·ªπ s∆∞ n√¥ng nghi·ªáp ƒëang chia s·∫ª l·∫°i k·∫øt qu·∫£ m√† AgriVision v·ª´a quan s√°t ƒë∆∞·ª£c.
            B·ªë c·ª•c y√™u c·∫ßu:
            1) T·ªïng quan t√¨nh h√¨nh nh·∫≠n d·∫°ng (k·∫øt qu·∫£ ph√°t hi·ªán, t·ªâ l·ªá m√≠t ch√≠n, non, s√¢u b·ªánh).  
            2Ô∏è) Nh·∫≠n x√©t & khuy·∫øn ngh·ªã thu ho·∫°ch (n√™u r√µ n√™n thu hay ch∆∞a, l√Ω do, l·ª£i √≠ch).  
            3Ô∏è) Bi·ªán ph√°p x·ª≠ l√Ω n·∫øu c√≥ m√≠t s√¢u b·ªánh (ƒë∆∞a h∆∞·ªõng d·∫´n th·ª±c t·∫ø, d·ªÖ hi·ªÉu).  
            4Ô∏è) H·ªó tr·ª£ k·ªπ thu·∫≠t & t√≠nh nƒÉng th√¥ng minh c·ªßa h·ªá th·ªëng (m√¥ t·∫£ c√°ch AgriVision gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω v√† chƒÉm s√≥c v∆∞·ªùn hi·ªáu qu·∫£ h∆°n).   
            5) Gi·ªõi thi·ªáu ng·∫Øn v·ªÅ vai tr√≤ c·ªßa AgriVision trong vi·ªác h·ªó tr·ª£ b·∫°n theo d√µi v∆∞·ªùn qua video.  
            Phong c√°ch vi·∫øt:
            - M·ªü ƒë·∫ßu b·∫±ng l·ªùi ch√†o: ‚ÄúCh√†o b·∫°n, t√¥i l√† AgriVision ‚Äì ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh trong v∆∞·ªùn m√≠t.‚Äù  
            - Ng√¥n t·ª´ th√¢n thi·ªán, r√µ r√†ng, kh√¥ng r∆∞·ªùm r√†.  
            """

            ai_text = None
            try:
                if GEMINI_KEY:
                    model = genai.GenerativeModel("models/gemini-2.5-flash")
                    resp = model.generate_content(prompt)
                    ai_text = getattr(resp, "text", None) or str(resp)
                else:
                    ai_text = "Ph√¢n t√≠ch th·ªß c√¥ng: AgriVision ch∆∞a k√≠ch ho·∫°t Gemini API."
            except Exception:
                ai_text = "Kh√¥ng th·ªÉ g·ªçi Gemini API, hi·ªÉn th·ªã k·∫øt qu·∫£ t√≥m t·∫Øt thay th·∫ø."

            st.markdown("### üß† K·∫øt qu·∫£ ph√¢n t√≠ch video")
            st.markdown(
                f"<div style='background-color:#FAFAFA; padding:15px; border-radius:10px; color:#212121;'>{ai_text}</div>",
                unsafe_allow_html=True
            )
    
    # ------------------- WEBCAM (CHU·∫®N HI·ªÇN TH·ªä) -------------------
    if source == "üì∑ Webcam":
        st.info("B·∫≠t webcam c·ªßa b·∫°n ƒë·ªÉ AgriVision nh·∫≠n d·∫°ng tr√°i m√≠t theo th·ªùi gian th·ª±c.")
        run = st.checkbox("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng qua Webcam", value=False)

        video_col, json_col = st.columns([3, 2])
        frame_slot = video_col.empty()
        json_box = json_col.empty()

        detections_all = []
        cap = cv2.VideoCapture(0)

        if run:
            st.warning("‚èπ D·ª´ng nh·∫≠n d·∫°ng b·∫±ng c√°ch b·ªè ch·ªçn checkbox.")
            while True:
                ret, frame = cap.read()
                if not ret or not run:
                    break

                results = model.predict(frame, conf=conf_v)
                predictions_json = {"predictions": []}

                if results and len(results) > 0:
                    boxes = results[0].boxes
                    labels = results[0].names
                    for box in boxes:
                        cls_id = int(box.cls[0])
                        label = labels.get(cls_id, "m√≠t")
                        conf = float(box.conf[0])
                        xyxy = box.xyxy[0].cpu().numpy().astype(float)
                        x, y, w, h = xyxy[0], xyxy[1], xyxy[2] - xyxy[0], xyxy[3] - xyxy[1]

                        predictions_json["predictions"].append({
                            "class": label,
                            "confidence": round(conf, 3),
                            "bbox": {
                                "x": round(x, 3),
                                "y": round(y, 3),
                                "width": round(w, 3),
                                "height": round(h, 3)
                            }
                        })

                        # V·∫Ω bounding box v√† label
                        cv2.rectangle(frame, (int(xyxy[0]), int(xyxy[1])),
                                    (int(xyxy[2]), int(xyxy[3])), (0, 255, 0), 2)
                        label_text = f"{label} {conf:.0%}"
                        (tw, th), _ = cv2.getTextSize(label_text, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)
                        cv2.rectangle(frame, (int(xyxy[0]), int(xyxy[1] - th - 6)),
                                    (int(xyxy[0] + tw + 4), int(xyxy[1])), (0, 255, 0), -1)
                        cv2.putText(frame, label_text, (int(xyxy[0] + 2), int(xyxy[1] - 4)),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_slot.image(frame_rgb, use_container_width=True)

                # Hi·ªÉn th·ªã JSON realtime b√™n ph·∫£i
                formatted_json = json.dumps(predictions_json, indent=2, ensure_ascii=False)
                json_box.markdown(
                    f"""
                    <div style="background-color:#f9fafb;padding:10px;border-radius:10px;
                    border:1px solid #e3e3e3;height:411px;overflow-y:auto;
                    font-family:monospace;font-size:13px;white-space:pre;">
                    {formatted_json}
                    </div>
                    """,
                    unsafe_allow_html=True
                )

                detections_all.append(predictions_json)
                time.sleep(0.05)  # ƒë·ªÉ Streamlit k·ªãp render l·∫°i UI

            cap.release()
            st.success("üü¢ Webcam ƒë√£ d·ª´ng.")

# ---------------- TAB 3: TH·ªêNG K√ä & QU·∫¢N L√ù V∆Ø·ªúN ----------------
elif choice == "Th·ªëng k√™":

    st.markdown("## AgriVision ‚Äì Th·ªëng k√™ & Theo d√µi v∆∞·ªùn m√≠t")
    st.markdown("""
    Xin ch√†o üëã  
    ƒê√¢y l√† b·∫£ng ƒëi·ªÅu khi·ªÉn th√¥ng minh c·ªßa **AgriVision**, n∆°i b·∫°n c√≥ th·ªÉ xem l·∫°i t√¨nh h√¨nh v∆∞·ªùn m√≠t c·ªßa m√¨nh.  
    H·ªá th·ªëng t·ªïng h·ª£p k·∫øt qu·∫£ nh·∫≠n d·∫°ng, ph√¢n t√≠ch t·ª∑ l·ªá m√≠t **ch√≠n ‚Äì non ‚Äì s√¢u b·ªánh**,  
    v√† ƒë∆∞a ra **g·ª£i √Ω h√†nh ƒë·ªông th·ª±c t·∫ø** gi√∫p b·∫°n qu·∫£n l√Ω v∆∞·ªùn hi·ªáu qu·∫£ h∆°n üå±
    """)
    st.divider()

    # ======================= T·ªîNG QUAN NH·∫¨N D·∫†NG =========================
    st.subheader("T·ªïng quan nh·∫≠n d·∫°ng m·ªõi nh·∫•t")

    latest_path = os.path.join(os.path.dirname(__file__), "latest_results.json")
    counts, total = {}, 0

    if os.path.exists(latest_path):
        with open(latest_path, "r", encoding="utf-8") as f:
            latest = json.load(f)
        preds = latest.get("predictions", [])
        for p in preds:
            cls = p.get("class")
            if cls:
                counts[cls] = counts.get(cls, 0) + 1
        total = sum(counts.values())

    col1, col2, col3 = st.columns(3)
    col1.metric("T·ªïng s·ªë tr√°i ph√°t hi·ªán", total)
    col2.metric("‚úÖ M√≠t ch√≠n", counts.get("mit_chin", 0))
    col3.metric("‚ö†Ô∏è M√≠t s√¢u b·ªánh", counts.get("mit_saubenh", 0))

    if total > 0:
        st.caption(f"C·∫≠p nh·∫≠t l√∫c {datetime.now().strftime('%H:%M ‚Äì %d/%m/%Y')}")
        df_counts = pd.DataFrame(list(counts.items()), columns=["Lo·∫°i", "S·ªë l∆∞·ª£ng"])
        fig, ax = plt.subplots()
        colors = ["#7FC97F", "#FDBF6F", "#E31A1C"]
        ax.pie(df_counts["S·ªë l∆∞·ª£ng"], labels=df_counts["Lo·∫°i"], autopct="%1.1f%%", startangle=90, colors=colors)
        ax.set_title("T·ª∑ l·ªá c√°c lo·∫°i m√≠t trong v∆∞·ªùn", fontsize=12)
        fig.set_size_inches(4, 4)  
        st.pyplot(fig)
    else:
        st.info("üí° Ch∆∞a c√≥ d·ªØ li·ªáu nh·∫≠n d·∫°ng g·∫ßn ƒë√¢y. H√£y t·∫£i video ho·∫∑c b·∫≠t webcam ƒë·ªÉ c·∫≠p nh·∫≠t v∆∞·ªùn nh√©.")

    st.divider()

# ======================= HO·∫†T ƒê·ªòNG G·∫¶N ƒê√ÇY =========================
    st.subheader("üìÖ Nh·∫≠t k√Ω ho·∫°t ƒë·ªông nh·∫≠n d·∫°ng")

    history_path = os.path.join(os.path.dirname(__file__), "analysis_log.json")

    if os.path.exists(history_path):
        with open(history_path, "r", encoding="utf-8") as f:
            history = json.load(f)

        if isinstance(history, list) and len(history) > 0:
            df_hist = pd.DataFrame(history)
            df_hist["timestamp"] = pd.to_datetime(df_hist["timestamp"])

            # üé® T·∫°o figure v·ªõi style hi·ªán ƒë·∫°i
            plt.style.use("seaborn-v0_8-whitegrid")
            fig, ax = plt.subplots(figsize=(6, 3))

            # M√†u cho t·ª´ng l·ªõp
            colors = {
                "mit_chin": "#4CAF50",      # Xanh l√°
                "mit_non": "#FF9800",       # Cam
                "mit_saubenh": "#2196F3"    # Xanh d∆∞∆°ng
            }

            # V·∫Ω t·ª´ng nh√≥m class
            ax.xaxis.set_major_formatter(DateFormatter("%m-%d"))
            for cls_name, group in df_hist.groupby("class"):
                ax.plot(
                    group["timestamp"], group["count"],
                    marker="o", markersize=6, linewidth=2.5,
                    color=colors.get(cls_name, "#9E9E9E"),
                    label=cls_name.replace("_", " ").capitalize()
                )

            # C·∫•u h√¨nh giao di·ªán
            ax.legend(fontsize=9, loc="upper left", frameon=False)
            ax.set_ylabel("S·ªë l∆∞·ª£ng ph√°t hi·ªán", fontsize=10)
            ax.set_title("Xu h∆∞·ªõng nh·∫≠n d·∫°ng m√≠t theo th·ªùi gian", fontsize=12, fontweight="bold", pad=10)
            ax.tick_params(axis="x", labelrotation=20, labelsize=8)
            ax.set_xlabel("Th·ªùi gian", fontsize=9)

            # L√†m m∆∞·ª£t layout
            plt.tight_layout()
            st.pyplot(fig)

        else:
            st.caption("üìÇ Ch∆∞a c√≥ l·ªãch s·ª≠ nh·∫≠n d·∫°ng ƒë∆∞·ª£c l∆∞u.")
    else:
        st.caption("üìÅ H·ªá th·ªëng ch∆∞a ghi nh·∫≠n d·ªØ li·ªáu tr∆∞·ªõc ƒë√≥.")

    st.divider()

    # ======================= G·ª¢I √ù & C·∫¢NH B√ÅO =========================
    st.subheader("üß† G·ª£i √Ω & c·∫£nh b√°o t·ª´ AgriVision")

    if total > 0:
        chin = counts.get("mit_chin", 0)
        non = counts.get("mit_non", 0)
        sau = counts.get("mit_saubenh", 0)
        ratio_chin = chin / total if total else 0
        ratio_non = non / total if total else 0

        if ratio_chin >= 0.6:
            st.success("üå§Ô∏è **Thu ho·∫°ch s·∫Øp t·ªõi!** T·ª∑ l·ªá m√≠t ch√≠n cao, b·∫°n n√™n chu·∫©n b·ªã bao tr√°i v√† l√™n k·∫ø ho·∫°ch thu trong v√†i ng√†y t·ªõi.")
        elif ratio_non >= 0.6:
            st.info("üïì **Ch∆∞a v·ªôi thu ho·∫°ch:** Ph·∫ßn l·ªõn tr√°i v·∫´n c√≤n non, h√£y ch·ªù th√™m 3‚Äì5 ng√†y ƒë·ªÉ ƒë·∫°t ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t.")
        elif sau > 0:
            st.warning("üö® **Ph√°t hi·ªán s√¢u b·ªánh:** C√≥ m·ªôt s·ªë tr√°i b·ªã h∆∞ h·∫°i, n√™n t√°ch ri√™ng v√† x·ª≠ l√Ω s·ªõm ƒë·ªÉ tr√°nh l√¢y lan sang c√¢y kh√°c.")
        else:
            st.info("üìä H·ªá th·ªëng ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a ra khuy·∫øn ngh·ªã chi ti·∫øt.")
    else:
        st.caption("Vui l√≤ng ch·∫°y nh·∫≠n d·∫°ng tr∆∞·ªõc ƒë·ªÉ k√≠ch ho·∫°t ph√¢n t√≠ch t·ª± ƒë·ªông.")

    st.divider()

    # ======================= B√ÅO C√ÅO NHANH =========================
    st.subheader("üìã B√°o c√°o nhanh v∆∞·ªùn h√¥m nay")

    if total > 0:
        ratio_chin = (counts.get("mit_chin", 0) / total) * 100 if total else 0
        ratio_non = (counts.get("mit_non", 0) / total) * 100 if total else 0
        ratio_sau = (counts.get("mit_saubenh", 0) / total) * 100 if total else 0

        st.markdown(f"""
        **T·ªïng h·ª£p:**  
        - T·ªïng tr√°i ƒë∆∞·ª£c ph√°t hi·ªán: **{total}**  
        - üçà M√≠t ch√≠n: **{ratio_chin:.1f}%**  
        - üå± M√≠t non: **{ratio_non:.1f}%**  
        - üêõ M√≠t s√¢u b·ªánh: **{ratio_sau:.1f}%**

        **ƒê√°nh gi√° chung:**  
        - V∆∞·ªùn ƒëang ·ªü giai ƒëo·∫°n **{'ch√≠n r·ªô' if ratio_chin > 50 else 'ph√°t tri·ªÉn'}**.  
        - AgriVision s·∫Ω ti·∫øp t·ª•c theo d√µi ƒë·ªÉ g·ª£i √Ω th·ªùi ƒëi·ªÉm thu ho·∫°ch ph√π h·ª£p nh·∫•t.  
        """)
    else:
        st.caption("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªß ƒë·ªÉ l·∫≠p b√°o c√°o nhanh.")

# ---------------- TAB 4: SO S√ÅNH YOLOv8 ----------------
elif choice == "So s√°nh YOLOv8":

    st.markdown("## ‚öñÔ∏è So s√°nh m√¥ h√¨nh YOLOv8n v√† YOLOv8s")
    st.caption("ƒê√°nh gi√° chi ti·∫øt hi·ªáu nƒÉng m√¥ h√¨nh nh·∫≠n d·∫°ng m√≠t ‚Äì h·ªó tr·ª£ ch·ªçn m√¥ h√¨nh ph√π h·ª£p cho ·ª©ng d·ª•ng th·ª±c t·∫ø.")

    # ======================= UPLOAD FILE =========================
    st.markdown("### üìÇ T·∫£i d·ªØ li·ªáu hu·∫•n luy·ªán")
    col1, col2 = st.columns(2)
    with col1:
        uploaded_n = st.file_uploader("K·∫øt qu·∫£ YOLOv8n", type=["csv"], key="n")
    with col2:
        uploaded_s = st.file_uploader("K·∫øt qu·∫£ YOLOv8s", type=["csv"], key="s")

    # ======================= KI·ªÇM TRA FILE =========================
    if uploaded_n is None or uploaded_s is None:
        st.info("‚¨ÜÔ∏è Vui l√≤ng t·∫£i **c·∫£ hai file k·∫øt qu·∫£ (.csv)** ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng so s√°nh v√† b√°o c√°o.")
        st.stop()

    # ======================= ƒê·ªåC FILE =========================
    df_n = pd.read_csv(uploaded_n)
    df_s = pd.read_csv(uploaded_s)

    # ======================= CH·ªà S·ªê T·ªîNG QUAN =========================
    st.markdown("### üìà T·ªïng quan nhanh")

    summary_metrics = [
        "metrics/precision(B)", "metrics/recall(B)",
        "metrics/mAP50(B)", "metrics/mAP50-95(B)"
    ]

    v8n = [df_n[m].iloc[-1] if m in df_n.columns else np.nan for m in summary_metrics]
    v8s = [df_s[m].iloc[-1] if m in df_s.columns else np.nan for m in summary_metrics]

    col1, col2, col3 = st.columns(3)
    col1.metric("üéØ Precision", f"{v8s[0]*100:.2f}%", delta=f"{(v8s[0]-v8n[0])*100:.2f}%")
    col2.metric("üìä Recall", f"{v8s[1]*100:.2f}%", delta=f"{(v8s[1]-v8n[1])*100:.2f}%")
    col3.metric("üî• mAP50", f"{v8s[2]*100:.2f}%", delta=f"{(v8s[2]-v8n[2])*100:.2f}%")

    st.divider()

    # ======================= BI·ªÇU ƒê·ªí D·∫†NG LINE =========================
    st.markdown("### üìâ Hi·ªáu nƒÉng theo Epoch")

    chart_colors = {"n": "#A5D6A7", "s": "#2E7D32"}
    for metric in summary_metrics[:-1]:
        if metric in df_n.columns and metric in df_s.columns:
            fig = go.Figure()
            fig.add_trace(go.Scatter(y=df_n[metric], mode='lines', name="YOLOv8n", line=dict(color=chart_colors["n"], width=2)))
            fig.add_trace(go.Scatter(y=df_s[metric], mode='lines', name="YOLOv8s", line=dict(color=chart_colors["s"], width=2)))
            fig.update_layout(
                title=metric.replace("metrics/", "").replace("(B)", "").upper(),
                xaxis_title="Epoch",
                yaxis_title="Gi√° tr·ªã",
                template="plotly_white",
                height=320,
                legend=dict(orientation="h", yanchor="bottom", y=-0.25, xanchor="center", x=0.5)
            )
            st.plotly_chart(fig, use_container_width=True)

    st.divider()

    # ======================= BI·ªÇU ƒê·ªí C·ªòT SO S√ÅNH =========================
    st.markdown("### üìä So s√°nh hi·ªáu nƒÉng trung b√¨nh")

    compare_df = pd.DataFrame({
        "Ch·ªâ s·ªë": ["Precision", "Recall", "mAP50", "mAP50-95"],
        "YOLOv8n": v8n,
        "YOLOv8s": v8s
    })

    fig_bar = px.bar(
        compare_df.melt(id_vars="Ch·ªâ s·ªë", var_name="M√¥ h√¨nh", value_name="Gi√° tr·ªã"),
        x="Ch·ªâ s·ªë", y="Gi√° tr·ªã", color="M√¥ h√¨nh",
        color_discrete_sequence=["#A5D6A7", "#2E7D32"],
        barmode="group", text="Gi√° tr·ªã"
    )
    fig_bar.update_traces(texttemplate="%{text:.3f}", textposition="outside")
    fig_bar.update_layout(height=350, template="plotly_white")
    st.plotly_chart(fig_bar, use_container_width=True)

    st.divider()

    # ======================= NH·∫¨N X√âT =========================
    st.markdown("### üí¨ Nh·∫≠n x√©t t·ª´ AgriVision")

    precision_diff = v8s[0] - v8n[0]
    recall_diff = v8s[1] - v8n[1]
    map_diff = v8s[2] - v8n[2]

    insights = []
    if map_diff > 0.01:
        insights.append("üöÄ YOLOv8s ƒë·∫°t **mAP50 cao h∆°n**, ph√π h·ª£p h·ªá th·ªëng c·∫ßn ƒë·ªô ch√≠nh x√°c cao.")
    elif map_diff < -0.01:
        insights.append("‚öôÔ∏è YOLOv8n c√≥ **mAP50 t·ªët h∆°n nh·∫π**, t·ªëc ƒë·ªô nhanh h∆°n.")
    if precision_diff > 0.01:
        insights.append("üéØ YOLOv8s c√≥ **Precision cao h∆°n**, gi·∫£m nh·∫≠n nh·∫ßm m√≠t ch√≠n.")
    elif recall_diff > 0.01:
        insights.append("üìä YOLOv8n c√≥ **Recall t·ªët h∆°n**, ph√°t hi·ªán ƒë∆∞·ª£c nhi·ªÅu v·∫≠t th·ªÉ h∆°n.")
    insights.append("‚è±Ô∏è YOLOv8n hu·∫•n luy·ªán nhanh h∆°n ~40‚Äì60%.")
    insights.append("üåø V·ªõi thi·∫øt b·ªã gi·ªõi h·∫°n (Jetson, Pi): n√™n ch·ªçn **YOLOv8n**.")
    insights.append("üåæ N·∫øu tri·ªÉn khai quy m√¥ l·ªõn: **YOLOv8s** l√† l·ª±a ch·ªçn ∆∞u ti√™n.")

    for line in insights:
        st.markdown(line)

    st.divider()

    # ======================= XU·∫§T FILE PDF =========================
    st.markdown("### üßæ Xu·∫•t b√°o c√°o PDF")

    def generate_pdf():
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        story.append(Paragraph("<b>AgriVision - YOLOv8 Model Performance Comparison</b>", styles["Title"]))
        story.append(Spacer(1, 12))
        story.append(Paragraph(f"Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles["Normal"]))
        story.append(Spacer(1, 12))

        data = [["Metric", "YOLOv8n", "YOLOv8s"]] + \
            [[m, f"{v8n[i]:.4f}", f"{v8s[i]:.4f}"] for i, m in enumerate(["Precision", "Recall", "mAP50", "mAP50-95"])]

        table = Table(data)
        table.setStyle(TableStyle([
            ("BACKGROUND", (0, 0), (-1, 0), rl_colors.HexColor("#C8E6C9")),  # header xanh nh·∫°t
            ("GRID", (0, 0), (-1, -1), 0.5, rl_colors.grey),
            ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
            ("ALIGN", (0, 0), (-1, -1), "CENTER"),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
            ("ROWBACKGROUNDS", (0,1), (-1,-1), [rl_colors.whitesmoke, rl_colors.HexColor("#F7FBF7")]),
        ]))
        story.append(table)
        story.append(Spacer(1, 16))

        story.append(Paragraph("<b>Overall Insights:</b>", styles["Heading3"]))
        english_insights = [
            "YOLOv8s achieved a higher mAP50, ideal when accuracy is the priority.",
            "YOLOv8n trains ~40‚Äì60% faster, good for lightweight or real-time use.",
            "For resource-limited devices (Jetson, Raspberry Pi), choose YOLOv8n.",
            "For large-scale/cloud deployments, YOLOv8s is recommended.",
        ]
        for line in english_insights:
            story.append(Paragraph(line, styles["Normal"]))
            story.append(Spacer(1, 6))

        story.append(Spacer(1, 20))
        story.append(Paragraph("AgriVision ‚Äî AI model evaluation for modern agriculture.", styles["Italic"]))

        doc.build(story)
        buffer.seek(0)
        return buffer

    if st.button("üìÑ Xu·∫•t b√°o c√°o PDF"):
        pdf_buffer = generate_pdf()
        st.download_button(
            label="T·∫£i xu·ªëng PDF",
            data=pdf_buffer,
            file_name="AgriVision_YOLOv8_Report.pdf",
            mime="application/pdf"
        )

    st.info("‚ö†Ô∏è Hi·ªán t·∫°i, t√≠nh nƒÉng xu·∫•t PDF ch·ªâ h·ªó tr·ª£ **ti·∫øng Anh**. VƒÉn b·∫£n ti·∫øng Vi·ªát c√≥ th·ªÉ hi·ªÉn th·ªã kh√¥ng ch√≠nh x√°c.")

# ---------------- TAB 5: CHAT (Gemini) ----------------
elif choice == "Chat AgriVision ":
    st.header("Tr·ª£ l√Ω n√¥ng nghi·ªáp th√¥ng minh - AgriVision")
    st.subheader("Trao ƒë·ªïi v·ªÅ m√¥ h√¨nh YOLOv8, ƒë·ªô ch√≠n tr√°i m√≠t, ho·∫∑c k·ªπ thu·∫≠t n√¥ng nghi·ªáp.")
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    for msg in st.session_state.chat_history:
        role = msg["role"]
        content = msg["content"]
        if role=="user":
            st.write(f"**B·∫°n:** {content}")
        else:
            st.write(f"**AI:** {content}")

    user_q = st.text_input("Nh·∫≠p c√¢u h·ªèi", "")
    if st.button("G·ª≠i c√¢u h·ªèi"):
        if user_q.strip():
            st.session_state.chat_history.append({"role":"user","content":user_q})
            try:
                if GEMINI_KEY:
                    model = genai.GenerativeModel("models/gemini-2.5-flash")
                    resp = model.generate_content(user_q)
                    answer = getattr(resp, "text", None) or str(resp)
                else:
                    raise RuntimeError("No GEMINI key")
            except Exception as e:
                answer = f"[Fallback tr·∫£ l·ªùi t·ª± ƒë·ªông] Kh√¥ng th·ªÉ g·ªçi Gemini: {e}"
            st.session_state.chat_history.append({"role":"assistant","content":answer})
